from json import dumps
import requests
import re

from flask import Blueprint, request
import boto3

CONFIG = Blueprint('config', __name__)

CFN_SPEC = "https://d2stg8d246z9di.cloudfront.net/latest/gzip/CloudFormationResourceSpecification.json"
AWS_MANAGED_RULES = "https://raw.githubusercontent.com/awsdocs/aws-config-developer-guide/main/doc_source/managed-rules-by-aws-config.md"
AWS_CONFIG_DOCS_STUB = "https://raw.githubusercontent.com/awsdocs/aws-config-developer-guide/main/doc_source/"

def getConfig(service, resource):
  ret_key = f'AWS::{service.upper()}::{resource}' if (resource != 'blank') else f'AWS::{service.upper()}'
  data    = requests.get(CFN_SPEC).json()
  configs = data['PropertyTypes']
  ret     = {}
  for key in configs:
    if ret_key.upper() in key.upper():
      ret[key] = configs[key]
  return(ret)

def getConfigRules():
  client  = boto3.client('config')
  res     = client.describe_config_rules();
  return res

def getManagedRules():
  res = requests.get(AWS_MANAGED_RULES)
  matches = re.findall(r'\(.+\)', res.text)
  return [m[1:-1] for m in matches]

def putNewRule():
  client  = boto3.client('config')
  res     = client.put_config_rule(
    ConfigRule={
        'ConfigRuleName': 'test-rule',
        'Description': 'Generated by the pAWS backend',
        'Source': {
            'Owner': 'AWS',
            'SourceIdentifier': 'RDS_STORAGE_ENCRYPTED',
        },
        'ConfigRuleState': 'ACTIVE',
    },
    Tags=[
        {
            'Key': 'kmsKeyId',
            'Value': ''
        },
    ]
  )
  return res

def deleteRule(rule_name):
  client = boto3.client('config')
  res = client.delete_config_rule(ConfigRuleName=rule_name)
  return res

def startEval(rule_names):
  client = boto3.client('config')
  res = client.start_config_rules_evaluation(ConfigRuleNames=rule_names)
  return res

# Routes -----------------------------------------

@CONFIG.route("/config/options", methods=['GET'])
def get_config():
    service   = request.args.get('service')
    resource  = request.args.get('resource')
    data      = getConfig(service, resource)
    return dumps(data)

@CONFIG.route("/config/rules", methods=['GET'])
def get_rules():
  data = getConfigRules()
  return dumps(data)

@CONFIG.route("/config/rules/managed", methods=['GET'])
def get_managed_rules():
  data = getManagedRules()
  return dumps(data)

@CONFIG.route("/config/rule", methods=['POST'])
def add_rule():
  data = putNewRule()
  return dumps(data)

@CONFIG.route("/config/evaluate", methods=['POST'])
def evaluate_config():
  rule_names = request.args.get('name')
  data = startEval([rule_names])
  return dumps(data)
